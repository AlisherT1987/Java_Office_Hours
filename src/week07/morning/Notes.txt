Class and Objects


Custom Methods - re-usability

Class: Blueprint
Student Class : Batch Number, Location (state), Course, Name, LastName - attributes of a an Example Student
                Actions : Study certain amount of hour  -- 5, 2 hours
Objects of Student class: Hamid Alakbarov, SDET, OH, B28 ---- studies 7 hours

Re-usability, maintainability

We have some default values for DataTypes:
String -- null;
int -- 0;
double -- 0.0;
boolean -- false;

PIQ: Popular Interview Question
This Keyword: when to use
When your any method in blueprint class parameter name is same with your blueprint class instance variable name

Task-1
The class HouseItems holds a few attributes and has a method called toString. The attributes are name and color -both are strings and amount which is an int. toString returns a string showing all the Atts in a format.
for example:
HouseItems a = new HouseItems();
a.name = "table";
a.color = "brown";
a.amount = 1;
System.out.println(a.toString());
name: table color: brown amount: 1
Create the required attributes and method inside the HouseItems class

Task-2
version 1: without instance variables and no setInfo method
Create a "MyCalculator" class that has instance methods which can do simple math operations on two numbers. The methods are: plus, minus, multiply and divide.
All the methods get two ints then the method does the required math operation and returns the result as an int.

In version one we just have instance methods with parameters (actions) no attributes of the class

version 2: with instance variables and with a setInfo method that sets value to integers which will be used in instance methods of the class we create
for example:
MyCalculatorV2 myCal2 = new MyCalculatorV2();
myCal2.setInfo(1,1);
myCal.plus();
returns:2
myCal.minus();
returns:0

Task-3
Write a class named ParkingMeter containing:
Two instance variables named timeLeft and maxTime of type int.
A setInfo method accepting values for instance variables
A method named add that accepts an integer parameter. If the value of the parameter is equal to 25 (quarter), the value of timeLeft is increased by 30; otherwise, no increase is performed. Furthermore, the increase occurs up to maxTime only and the value of timeLeft will not exceed the value of maxTime set. add returns a boolean value: true if timeLeft was increased, false otherwise.
A method named tick that accepts no parameters and returns no value. tick decreases the value of timeLeft by 1, but only if the value of timeLeft is greater than 0.
A method named isExpired that accepts no parameters. isExpired returns a boolean value: true if the value of timeLeft is equal to 0; false otherwise.

Task-4
Write a class named GasTank containing:
An instance variable named "amount" of type double.
An instance variable named "capacity" of type double.
A setInfo method that sets values for these attributes.
A method named addGas that accepts a parameter of type double. The value of the amount instance variable is increased by the value of the parameter. However, if the value of amount is increased beyond the value of capacity, amount is set to capacity.
A method named useGas that accepts a parameter of type double. The value of the amount instance variable is decreased by the value of the parameter. However, if the value of amount is decreased below 0, amount is set to 0.
A method named isEmpty that accepts no parameters. isEmpty returns a boolean value: true if the value of amount is less than 0.1, and false otherwise.
A method named isFull that accepts no parameters. isFull returns a boolean value: true if the value of amount is greater than capacity-0.1, and false otherwise.
A method named getGasLevel that accepts no parameters. getGasLevel returns the value of the amount instance variable.
A method named fillUp that accepts no parameters. fillUp increases amount to capacity and returns the difference between the value of capacity and the original value of amount (that is, the amount of gas that is needed to fill the tank to capacity).